{
  "hash": "9379adcc1e519ec73b52adb1dec9b6a4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Welcome to My Portfolio!\"\nformat: html\njupyter: python3\n---\n\nHello! My nickname is [YourNickNameLastInitial]. This is my Quarto data visualization portfolio showcasing my Python and matplotlib skills.\n\n## About This Portfolio\n\nThis portfolio demonstrates how Quarto can seamlessly integrate Python code and visualizations into professional documents. Each chart below is created using matplotlib and embedded directly into this document.\n\n## Simple Line Chart\n\nLet's create a simple line chart showing some sample data:\n\n::: {#0e91aa79 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create the plot\nplt.figure(figsize=(7, 4.75))\nplt.plot(x, y, 'b-', linewidth=2, label='sin(x)')\nplt.xlabel('X values')\nplt.ylabel('Y values')\nplt.title('My First Matplotlib Chart')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=608 height=431}\n:::\n:::\n\n\n## Bar Chart Example\n\nHere's a bar chart showing some sample data:\n\n::: {#86fb105b .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Sample data for bar chart\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [23, 45, 56, 78, 32]\n\nplt.figure(figsize=(7, 4.75))\nbars = plt.bar(categories, values, color=['red', 'green', 'blue', 'orange', 'purple'])\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Sample Bar Chart')\n\n# Add value labels on bars\nfor bar, value in zip(bars, values):\n    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,\n             str(value), ha='center', va='bottom')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=585 height=431}\n:::\n:::\n\n\n## Scatter Plot with Random Data\n\nHere's a scatter plot showing random data points:\n\n::: {#6a9d4690 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data points\nnp.random.seed(42)  # For reproducibility\nx_random = np.random.randn(100)\ny_random = np.random.randn(100)\ncolors = np.random.rand(100)  # Random colors for each point\n\nplt.figure(figsize=(7, 4.75))\nscatter = plt.scatter(x_random, y_random, c=colors, cmap='viridis', \n                      s=100, alpha=0.6, edgecolors='black', linewidth=0.5)\nplt.xlabel('Random X Values')\nplt.ylabel('Random Y Values')\nplt.title('Scatter Plot with Random Data Points')\nplt.colorbar(scatter, label='Color Scale')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=576 height=431}\n:::\n:::\n\n\n## What is Matplotlib?\n\n**Matplotlib** is one of the most popular data visualization libraries in Python. It was created by John D. Hunter in 2003 and has become the foundation for many other visualization libraries.\n\n### Why is Matplotlib Useful?\n\n- **Versatile**: Create a wide variety of plots including line charts, bar charts, scatter plots, histograms, pie charts, and more\n- **Customizable**: Fine-tune every aspect of your visualizations - colors, labels, legends, fonts, and styles\n- **Publication Quality**: Generate high-quality figures suitable for academic papers, presentations, and professional reports\n- **Wide Adoption**: Extensively used in data science, scientific research, and industry\n- **Integration**: Works seamlessly with NumPy, pandas, and other scientific Python libraries\n- **Export Options**: Save figures in multiple formats (PNG, PDF, SVG, etc.)\n\nWhether you're analyzing data, creating reports, or building dashboards, matplotlib provides the tools you need to communicate your insights visually.\n\n## Pie Chart Example\n\nHere's a pie chart showing sample data distribution:\n\n::: {#97eda8cc .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Sample data for pie chart\nlabels = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsizes = [25, 30, 15, 20, 10]\ncolors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99cc']\nexplode = (0.1, 0, 0, 0, 0)  # Explode the 1st slice\n\nplt.figure(figsize=(7, 6))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.title('Sample Market Share Distribution')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=555 height=483}\n:::\n:::\n\n\n## Conclusion\n\nThis demonstrates how Quarto can seamlessly integrate Python code and visualizations into professional documents that can be hosted publicly on GitHub Pages!\npyth\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}